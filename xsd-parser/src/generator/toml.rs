use regex::Regex;

const CARGO_TOML_TEMPLATE: &str = r#"[package]
name = "{pname}"
description = "Autogenerated file"
version = "0.1.0"
edition = "2021"

[dependencies]
{pdependencies}
"#;

const YASERDE_PFORK_DEP: &str = "{ git = \"https://github.com/cHuberCoffee/yaserde.git\", branch = \"enum_namespace_fix\", features = [\"derive\"] }";
const XSD_PARSER_PFORK_DEP: &str = "{ git = \"https://github.com/cHuberCoffee/xsd-parser-rs.git\", branch = \"use_pfork_yaserde\" }";

pub enum FileType {
    Wsdl,
    Xsd,
}

pub fn generate_cargo_toml(code: &String, pname: &str, ftype: FileType) -> String {
    let mut dep: Vec<(String, String)> = vec![
        ("yaserde".to_string(), YASERDE_PFORK_DEP.to_string()),
        ("validate".to_string(), "{ path = \"./../../validate\" }".to_string()),
    ];
    if code.contains("UtilsTupleIo")
        || code.contains("UtilsDefaultSerde")
        || code.contains("UtilsUnionSerDe")
    {
        dep.push(("xml-rs".to_string(), "\"0.8\"".to_string()));
    }

    if code.contains("UtilsDefaultSerde") {
        dep.push((
            "xsd-types".to_string(),
            XSD_PARSER_PFORK_DEP.to_string(),
            // " { git = \"https://github.com/lumeohq/xsd-parser-rs\" }".to_string(),
        ));
    }

    let use_lines = code
        .lines()
        .filter(|line| line.starts_with("use") || line.starts_with("pub use"))
        .filter(|line| !line.contains("yaserde"))
        .filter(|line| !line.contains("std"))
        .filter(|line| !line.contains("validate"));

    let regex = Regex::new(r"(?:use|pub use)\s+([\w_]+)").unwrap();
    let crate_names: Vec<&str> = use_lines
        .filter_map(|line| regex.captures(line))
        .map(|caps| caps.get(1).unwrap().as_str())
        .collect();

    for cn in crate_names {
        let mcn = cn.replace("_", "-");

        // filter for possilbe double occurence
        if dep.iter().any(|(f, _)| *f == mcn) {
            continue;
        }

        if mcn.contains("xsd-") {
            dep.push((
                mcn.to_string(),
                format!("{}", XSD_PARSER_PFORK_DEP.to_string()),
                // format!(" {{ git = \"https://github.com/lumeohq/xsd-parser-rs\" }}"),
            ));
        } else {
            match ftype {
                FileType::Xsd => {
                    dep.push((mcn.to_string(), format!(" {{ path = \"./../{}\" }}", mcn)))
                }
                FileType::Wsdl => {
                    dep.push((mcn.to_string(), format!(" {{ path = \"./../../xsd_rs/{}\" }}", mcn)))
                }
            }
        }
    }

    let dep_string = dep
        .iter()
        .map(|(dep_name, dep_version)| format!("{dep_name} = {dep_version}"))
        .collect::<Vec<_>>()
        .join("\n");

    CARGO_TOML_TEMPLATE
        .replace("{pname}", pname)
        .replace("{pdependencies}", &dep_string)
        .to_string()
}
